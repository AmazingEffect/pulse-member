buildscript {
    ext {
        protobufVersion = '4.27.2'  // 최신 버전
        protobufPluginVersion = '0.9.4'  // 최신 버전
        grpcVersion = '1.65.1'  // 최신 버전
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.google.protobuf' version "${protobufPluginVersion}"
}

group = 'com.pulse'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/release' }
    mavenLocal()  // 이 부분을 추가하여 로컬 Maven 리포지토리를 참조합니다.
}


dependencies {

    // spring 기본 설정
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // spring security 설정
	implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // oauth2 설정
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//	implementation 'org.springframework.security:spring-security-oauth2-jose'

    // jwt 설정
    implementation 'io.jsonwebtoken:jjwt:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // spring data jpa 설정
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // db 설정
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    // msa 로깅 Jaeger 설정
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp'

    // 예외 stack trace 설정
    implementation 'org.apache.commons:commons-lang3:3.15.0'

//    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
//    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

    // kafka 설정
    implementation 'org.springframework.kafka:spring-kafka'

    // grpc 프로토콜 버터를 사용하기 위한 핵심 라이브러리 (Protobuf 메시지의 직렬화 및 역직렬화를 지원합니다.)
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

    // grpc 서버, 클라이언트 설정
    implementation 'net.devh:grpc-spring-boot-starter:3.1.0.RELEASE' // Spring Boot와 gRPC의 통합을 간편하게 도와주는 스타터
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}" // Netty Shaded 사용(gRPC 서버와 클라이언트의 Netty 전송 계층을 제공)
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"     // Protobuf 메시지와 gRPC의 통합을 지원
    implementation "io.grpc:grpc-stub:${grpcVersion}"         // gRPC 클라이언트 스텁을 생성
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

    // devtools 설정
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // mapstruct 설정
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // 라이브러리 추가
    implementation 'com.pulse.common:event-library:1.0.0'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // test 설정
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"

    // mockito 설정
    testImplementation 'org.mockito:mockito-core:5.12.0'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}


tasks.named('test') {
    useJUnitPlatform()
}
